<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.test.mapper.OrderMapper">
    <select id="selectOrderByUserId" resultType="org.test.entity.Order">
        select * from tb_order where user_id=#{id}
    </select>
    <!--注意，如果查询出来的列同名，则需要别名区分-->
    <select id="selectOrderById" resultMap="orderResultMap">
        select u.*,o.id as oid,o.code as code,o.total as total,o.user_id as user_id
        from tb_user u,tb_order o where u.id=o.user_id
        and o.id=#{id}
    </select>
    <resultMap id="orderResultMap" type="org.test.entity.Order">
        <id property="id" column="oid"/>
        <result property="code" column="code"/>
        <result property="total" column="total"/>
        <!--多对一-->
        <association property="tbUser" javaType="org.test.entity.TbUser" autoMapping="true">
            <id property="id" column="id"/>
        </association>
        <!--多对多-->
        <collection property="articleList" javaType="ArrayList" column="oid" ofType="org.test.entity.Article"
                    select="org.test.mapper.ArticleMapper.selectArticleByOrderId" fetchType="lazy" autoMapping="true">
            <id property="id" column="id"/>

        </collection>
    </resultMap>
    <!--高级查询的整理
    <resultMap type="Order" id="orderUserLazyResultMap">
        <!—定义pojo中的单个对象的 property 定义对象的属性名， javaType 属性的类型，
        <association property="user" javaType="User" autoMapping="true">
            <id />
        </association>
        <!—如果属性是集合使用collection ,javaType 集合的类型，ofType 表示集中的存储的元素类型
        <collection property="details" javaType="List" ofType="OrderDetail" autoMapping="true">
        <id />
    </resultMap>
    -->
    <!--如果sql语句中出现’<’的解决方案-->

</mapper>
