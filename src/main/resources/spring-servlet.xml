<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--SpringMVC 主要就是来管理网站的跳转逻辑，所以在配置扫描的包时，使用 use-default-filters 属性，
    并设置为 false，即不使用默认的 Filter 进行扫描。-->
    <context:component-scan base-package="org.test.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--这个是处理器映射器，这种方式，请求地址其实就是一个 Bean 的名字，然后根据这个 bean 的名字查找对应的处理器
    <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping" id="handlerMapping">
        <property name="beanName" value="/hello"/>
    </bean>
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" id="handlerAdapter"/>
    -->
    <!--正常情况下，我们在项目中使用的是 RequestMappingHandlerMapping RequestMappingHandlerAdapter
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" id="handlerMapping"/>
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" id="handlerAdapter"/>
    -->
    <!--代替 RequestMappingHandlerMapping 和 RequestMappingHandlerAdapter 的两行配置-->
    <mvc:annotation-driven validator="validatorFactoryBean" conversion-service="conversionService">
        <mvc:message-converters>
            <ref bean="httpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!--配置完成后，在服务端就可以接收前端传来的日期参数了-->
    <bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean"
          id="conversionService">
        <property name="converters">
            <set>
                <!--                <ref bean="dateConverter"/>-->
                <bean class="org.test.common.DateConverter"/>
            </set>
        </property>
    </bean>

    <!--视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" id="viewResolver">
        <property name="prefix" value="WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--SimpleUrlHandlerMapping
    <bean class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping" id="handlerMapping">
        <property name="mappings">
            <props>
                <prop key="/hello">myController</prop>
                <prop key="/hello2">myController2</prop>
            </props>
        </property>
    </bean>
    -->
    <!--SimpleControllerHandlerAdapter
    <bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter" />
    -->

    <!--HttpRequestHandlerAdapter
    <bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" id="handlerAdapter"/>
    -->
    <!--注意，这个 Bean 一定要有 id，并且 id 必须是 multipartResolver-->
    <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
        <!--默认的编码-->
        <property name="defaultEncoding" value="UTF-8"/>
        <!--上传的总文件大小-->
        <property name="maxUploadSize" value="1048576"/>
        <!--上传的单个文件大小-->
        <property name="maxUploadSizePerFile" value="1048576"/>
        <!--内存中最大的数据量，超过这个数据量，数据就要开始往硬盘中写了-->
        <property name="maxInMemorySize" value="4096"/>
        <!--临时目录，超过 maxInMemorySize 配置的大小后，数据开始往临时目录写，等全部上传完成后，再将数据合并到正式的文件上传目录-->
        <property name="uploadTempDir" value="file:///D:\\tmp"/>
    </bean>

    <!--在 SpringMVC 中，静态资源默认都是被自动拦截的，无法访问，意味着上传成功的图片无法访问，
    因此，还需要我们在 SpringMVC 的配置文件中，再添加如下配置-->
    <mvc:resources mapping="/**" location="/"/>

    <!-- 使用 StandardServletMultipartResolver ，那我们首先在 SpringMVC 的配置文件中，配置这个 Bean
    注意，这里 Bean 的名字依然叫 multipartResolver
    配置完成后，注意，这个 Bean 无法直接配置上传文件大小等限制。需要在 web.xml 中进行配置
    （这里，即使不需要限制文件上传大小，也需要在 web.xml 中配置 multipart-config）：

    <bean class="org.springframework.web.multipart.support.StandardServletMultipartResolver" id="multipartResolver">
    </bean>
    -->

    <!--异常处理配置
    配置时，提供一个 LocalValidatorFactoryBean 的实例，然后 Bean 的校验使用 HibernateValidator。-->
    <bean class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"
          id="validatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <property name="validationMessageSource" ref="bundleMessageSource"/>
    </bean>
    <!--定义错误提示文本，在 resources 目录下新建一个 MyMessage.properties 文件
    SpringMVC 配置中，加载这个配置文件
    -->
    <bean class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
          id="bundleMessageSource">
        <property name="basenames">
            <list>
                <!--不用加后缀.properties。否则失效-->
                <value>classpath:MyMessage</value>
            </list>
        </property>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="300"/>
    </bean>

    <!--提供一个 jackson 的 HttpMesageConverter 实例，在这个实例中，自己去配置相关属性，这里的配置将是一个全局配置-->
    <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"
          id="httpMessageConverter">
        <property name="objectMapper">
            <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                <property name="dateFormat">
                    <bean class="java.text.SimpleDateFormat">
                        <constructor-arg name="pattern" value="yyyy-MM-dd HH:mm:ss"/>
                    </bean>
                </property>
                <property name="timeZone" value="Asia/Shanghai"/>
            </bean>
        </property>
    </bean>
    <!-- gson 全局配置
    <bean class="org.springframework.http.converter.json.GsonHttpMessageConverter" id="httpMessageConverter">
        <property name="gson">
            <bean class="com.google.gson.Gson" factory-bean="gsonBuilder" factory-method="create"/>
        </property>
    </bean>
    <bean class="com.google.gson.GsonBuilder" id="gsonBuilder">
        <property name="dateFormat" value="yyyy-MM-dd HH:mm:ss"/>
    </bean>
    -->
    <!--fastjson 在使用时，一定要自己手动配置 HttpMessageConverter（前面两个如果没有特殊需要，直接添加依赖就可以了）。
    <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter" id="httpMessageConverter">
        <property name="fastJsonConfig">
            <bean class="com.alibaba.fastjson.support.config.FastJsonConfig">
                <property name="dateFormat" value="yyyy-MM-dd HH:mm:ss"/>
            </bean>
        </property>
        fastjson 默认中文乱码，添加如下配置解决：
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=utf-8</value>
            </list>
        </property>
    </bean>
    -->
    <!--springmvc 自定义拦截器
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <ref bean="myInterceptor1"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="org.test.common.MyInterceptor2"/>
        </mvc:interceptor>
    </mvc:interceptors>
    -->
</beans>